import wollok.game.*
import clock.*
import TimeSeconds.*
import TimeMS.*
import TimeHMS.*
import TimeDHMS.*
import TimeDHMSms.*

describe "Clock and Timer"{
	var clock 
	var time 
	var startTime
	var timeLimit
	
	method initialize(){
			time = new TimeSeconds(seconds = 0) //0H 0M 0S
			startTime = time
	        timeLimit = time
	        clock = new Clock(time = time, startTime = startTime, timeLimit = timeLimit)
	}
	
	test "Reach Time Limit with all values in 0 and not with limit in 1 second" {
		assert.that(clock.reachTimeLimit())
				
		clock.setLimit(new TimeSeconds(seconds = 1)) //Testing clock is enough
		assert.notThat(clock.reachTimeLimit())
			
	}
	
	test "Start and Reset" {
		clock.setStart(new TimeHMS(hours = 1, minutes = 1, seconds = 1)) //Testing clock is enough
		assert.equals(0, clock.fullSeconds())
		
		clock.reset()
		assert.equals(1, clock.hours())
		assert.equals(1, clock.minutes())	
		assert.equals(1, clock.seconds())
	}
	
	test "Tick unTick" {
		assert.equals(0, clock.fullSeconds())
		clock.tick()
		assert.equals(1, clock.fullSeconds())
		
		clock.unTick()
		assert.equals(0, clock.fullSeconds())
				
		clock.setTime(new TimeHMS(hours = 0, minutes = 0, seconds = 59))
		clock.tick()
		assert.equals(0, clock.seconds())
		assert.equals(1, clock.minutes())
		
		clock.setTime(new TimeHMS(hours = 0, minutes = 59, seconds = 59))
		clock.tick()
		assert.equals(1, clock.hours())
		assert.equals(0, clock.minutes())
		assert.equals(0, clock.seconds())
		
		clock.setTime(new TimeHMS(hours = 1, minutes = 1, seconds = 0))
		clock.unTick()
		assert.equals(59, clock.seconds())
		assert.equals(00, clock.minutes())
		assert.equals(01, clock.hours())
		
		
		clock.setTime(new TimeHMS(hours = 1, minutes = 0, seconds = 0))
		clock.unTick()
		assert.equals(59, clock.seconds())
		assert.equals(59, clock.minutes())
		assert.equals(00, clock.hours())
		
		clock.setTime(new TimeHMS(hours = 0, minutes = 0, seconds = 0))
		assert.throwsExceptionWithMessage("There is not more time left to untick!", {clock.unTick()})	
	}	
	

}


/* A testear

class DigitDraw {
	const format = ".png"
	var property position
	var property digit
	
	method image(){
		return digit + format
	}
}

class TimerMSDraw inherits Timer{
	var property position 
	
	const digits = [new DigitDraw(position = position, digit = "questionMark"),
					new DigitDraw(position = position, digit = "questionMark"),
					new DigitDraw(position = position, digit = "colon"), 
					new DigitDraw(position = position, digit = "questionMark"),
					new DigitDraw(position = position, digit = "questionMark")]
	
	method draw(){
		digits.get(0).digit(self.firstDigit(self.minutes()))		
		digits.get(1).digit(self.secondDigit(self.minutes()))
		digits.get(3).digit(self.firstDigit(self.seconds()))
		digits.get(4).digit(self.secondDigit(self.seconds()))
	}
	
	method firstDigit(doubleDigit) {
		return (doubleDigit / 10).abs()
	}
	
	method secondDigit(doubleDigit) {
		return doubleDigit - (self.firstDigit(doubleDigit) * 10)
	}
	
	
}
*/
